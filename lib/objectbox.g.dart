// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/features/authentication/data/api_url.dart';
import 'src/features/authentication/data/login_user_data.dart';
import 'src/features/authentication/objects/user.dart';
import 'src/features/home/objects/fahrzeug.dart';
import 'src/features/home/objects/geodata.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 2492132413375194045),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(7, 4483891829475136347),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4451648304969386789),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3231024758808749722),
        name: 'mail',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6899071104821995895),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6663349691697981530),
        name: 'personalnummer',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1481039183044372288),
        name: 'adminRecht',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8857006839854587035),
        name: 'privatfahrt',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4483891829475136347),
        name: 'prozentregelung',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4725321174313482246),
    name: 'Fahrzeug',
    lastPropertyId: const obx_int.IdUid(38, 5130365957985708650),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6181775847117745108),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 691807637352760470),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6532118491828356440),
        name: 'imagePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2054600200631530198),
        name: 'objektName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4814464539751751022),
        name: 'caption',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1041426771502522887),
        name: 'gpsTimeString',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 5268494759527940773),
        name: 'versicherungsnummer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 3612276928216135745),
        name: 'telefonUnfall',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 7952618062842541291),
        name: 'telefonPanne',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 850376759007650240),
        name: 'versicherung',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 4751667216992063845),
        name: 'gpsTime',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 3764223658986668640),
        name: 'course',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 3152079915596971326),
        name: 'satInView',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 2591959495218126666),
        name: 'overspeed',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 4269067653250651552),
        name: 'fahrzeugId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 5169602788426664912),
        name: 'faultCodes',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 4398058805191570779),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 3217827920109856868),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 7912068835933179019),
        name: 'speed',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 3383653787697762654),
        name: 'speedKnots',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 4150918775628667114),
        name: 'rpm',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 9097709455073379015),
        name: 'fuelLevel',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 1286004137233887589),
        name: 'fuelRate',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(28, 4564575478517618264),
        name: 'externalPower',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(29, 5744871447191606469),
        name: 'mileage',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(30, 1312058018774545669),
        name: 'altitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(31, 1285359685239699948),
        name: 'coolantTemperature',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(32, 5666397708294996459),
        name: 'gasPedal',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(33, 835198376836444007),
        name: 'motorLast',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(34, 6401013270006278715),
        name: 'xAcceleration',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(35, 5286088191898578339),
        name: 'zAcceleration',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(36, 4057863464081282204),
        name: 'ignition',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(37, 6761788728027558628),
        name: 'typ',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(38, 5130365957985708650),
        name: 'typNummer',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 434567157745431245),
    name: 'GeoData',
    lastPropertyId: const obx_int.IdUid(3, 7097490499595312094),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2628069601617340041),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8681447968760908698),
        name: 'lat',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7097490499595312094),
        name: 'lon',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 4348756249716174310),
    name: 'Api',
    lastPropertyId: const obx_int.IdUid(5, 697934595393799308),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7885808146490456880),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6484640682554959204),
        name: 'url',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7639477196981434986),
        name: 'shortUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 65255319751116559),
        name: 'localhostURL',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 697934595393799308),
        name: 'apiUrl',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 2556811995860029375),
    name: 'LoginUserData',
    lastPropertyId: const obx_int.IdUid(3, 4458439923652885007),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3039073897632894564),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8004158669458679451),
        name: 'username',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4458439923652885007),
        name: 'password',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(5, 2556811995860029375),
    lastIndexId: const obx_int.IdUid(1, 7225187244195517059),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [7225187244195517059],
    retiredPropertyUids: const [
      95372804159786534,
      723810006647610969,
      3923588671342832562,
      2079692014902960994,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
      model: _entities[0],
      toOneRelations: (User object) => [],
      toManyRelations: (User object) => {},
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final mailOffset = fbb.writeString(object.mail);
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, mailOffset);
        fbb.addOffset(2, nameOffset);
        fbb.addInt64(3, object.personalnummer);
        fbb.addInt64(4, object.adminRecht);
        fbb.addBool(5, object.privatfahrt);
        fbb.addBool(6, object.prozentregelung);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final personalnummerParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final mailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final adminRechtParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final privatfahrtParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final prozentregelungParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final object = User(
          id: idParam,
          personalnummer: personalnummerParam,
          mail: mailParam,
          name: nameParam,
          adminRecht: adminRechtParam,
          privatfahrt: privatfahrtParam,
          prozentregelung: prozentregelungParam,
        );

        return object;
      },
    ),
    Fahrzeug: obx_int.EntityDefinition<Fahrzeug>(
      model: _entities[1],
      toOneRelations: (Fahrzeug object) => [],
      toManyRelations: (Fahrzeug object) => {},
      getId: (Fahrzeug object) => object.id,
      setId: (Fahrzeug object, int id) {
        object.id = id;
      },
      objectToFB: (Fahrzeug object, fb.Builder fbb) {
        final nameOffset =
            object.name == null ? null : fbb.writeString(object.name!);
        final imagePathOffset =
            object.imagePath == null
                ? null
                : fbb.writeString(object.imagePath!);
        final objektNameOffset =
            object.objektName == null
                ? null
                : fbb.writeString(object.objektName!);
        final captionOffset =
            object.caption == null ? null : fbb.writeString(object.caption!);
        final gpsTimeStringOffset =
            object.gpsTimeString == null
                ? null
                : fbb.writeString(object.gpsTimeString!);
        final versicherungsnummerOffset =
            object.versicherungsnummer == null
                ? null
                : fbb.writeString(object.versicherungsnummer!);
        final telefonUnfallOffset =
            object.telefonUnfall == null
                ? null
                : fbb.writeString(object.telefonUnfall!);
        final telefonPanneOffset =
            object.telefonPanne == null
                ? null
                : fbb.writeString(object.telefonPanne!);
        final versicherungOffset =
            object.versicherung == null
                ? null
                : fbb.writeString(object.versicherung!);
        final typOffset =
            object.typ == null ? null : fbb.writeString(object.typ!);
        final typNummerOffset =
            object.typNummer == null
                ? null
                : fbb.writeString(object.typNummer!);
        fbb.startTable(39);
        fbb.addInt64(0, object.id);
        fbb.addOffset(4, nameOffset);
        fbb.addOffset(6, imagePathOffset);
        fbb.addOffset(7, objektNameOffset);
        fbb.addOffset(8, captionOffset);
        fbb.addOffset(9, gpsTimeStringOffset);
        fbb.addOffset(10, versicherungsnummerOffset);
        fbb.addOffset(11, telefonUnfallOffset);
        fbb.addOffset(12, telefonPanneOffset);
        fbb.addOffset(13, versicherungOffset);
        fbb.addInt64(14, object.gpsTime);
        fbb.addInt64(15, object.course);
        fbb.addInt64(16, object.satInView);
        fbb.addInt64(17, object.overspeed);
        fbb.addInt64(18, object.fahrzeugId);
        fbb.addInt64(19, object.faultCodes);
        fbb.addFloat64(20, object.latitude);
        fbb.addFloat64(21, object.longitude);
        fbb.addFloat64(22, object.speed);
        fbb.addFloat64(23, object.speedKnots);
        fbb.addFloat64(24, object.rpm);
        fbb.addFloat64(25, object.fuelLevel);
        fbb.addFloat64(26, object.fuelRate);
        fbb.addFloat64(27, object.externalPower);
        fbb.addFloat64(28, object.mileage);
        fbb.addFloat64(29, object.altitude);
        fbb.addFloat64(30, object.coolantTemperature);
        fbb.addFloat64(31, object.gasPedal);
        fbb.addFloat64(32, object.motorLast);
        fbb.addFloat64(33, object.xAcceleration);
        fbb.addFloat64(34, object.zAcceleration);
        fbb.addBool(35, object.ignition);
        fbb.addOffset(36, typOffset);
        fbb.addOffset(37, typNummerOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final objektNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final captionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final gpsTimeStringParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final versicherungsnummerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final telefonUnfallParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final telefonPanneParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final versicherungParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final typParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 76);
        final typNummerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 78);
        final gpsTimeParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          32,
        );
        final latitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          44,
        );
        final longitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          46,
        );
        final speedParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          48,
        );
        final speedKnotsParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          50,
        );
        final courseParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          34,
        );
        final rpmParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          52,
        );
        final fuelLevelParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          54,
        );
        final fuelRateParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          56,
        );
        final externalPowerParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          58,
        );
        final mileageParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          60,
        );
        final altitudeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          62,
        );
        final coolantTemperatureParam = const fb.Float64Reader()
            .vTableGetNullable(buffer, rootOffset, 64);
        final gasPedalParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          66,
        );
        final motorLastParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          68,
        );
        final xAccelerationParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          70,
        );
        final zAccelerationParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          72,
        );
        final overspeedParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          38,
        );
        final satInViewParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          36,
        );
        final fahrzeugIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          40,
        );
        final ignitionParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          74,
        );
        final faultCodesParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          42,
        );
        final object =
            Fahrzeug(
                objektName: objektNameParam,
                caption: captionParam,
                name: nameParam,
                gpsTimeString: gpsTimeStringParam,
                versicherungsnummer: versicherungsnummerParam,
                telefonUnfall: telefonUnfallParam,
                telefonPanne: telefonPanneParam,
                versicherung: versicherungParam,
                typ: typParam,
                typNummer: typNummerParam,
                gpsTime: gpsTimeParam,
                latitude: latitudeParam,
                longitude: longitudeParam,
                speed: speedParam,
                speedKnots: speedKnotsParam,
                course: courseParam,
                rpm: rpmParam,
                fuelLevel: fuelLevelParam,
                fuelRate: fuelRateParam,
                externalPower: externalPowerParam,
                mileage: mileageParam,
                altitude: altitudeParam,
                coolantTemperature: coolantTemperatureParam,
                gasPedal: gasPedalParam,
                motorLast: motorLastParam,
                xAcceleration: xAccelerationParam,
                zAcceleration: zAccelerationParam,
                overspeed: overspeedParam,
                satInView: satInViewParam,
                fahrzeugId: fahrzeugIdParam,
                ignition: ignitionParam,
                faultCodes: faultCodesParam,
              )
              ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
              ..imagePath = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 16);

        return object;
      },
    ),
    GeoData: obx_int.EntityDefinition<GeoData>(
      model: _entities[2],
      toOneRelations: (GeoData object) => [],
      toManyRelations: (GeoData object) => {},
      getId: (GeoData object) => object.id,
      setId: (GeoData object, int id) {
        object.id = id;
      },
      objectToFB: (GeoData object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.lat);
        fbb.addFloat64(2, object.lon);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final latParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final lonParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final object = GeoData(lat: latParam, lon: lonParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    Api: obx_int.EntityDefinition<Api>(
      model: _entities[3],
      toOneRelations: (Api object) => [],
      toManyRelations: (Api object) => {},
      getId: (Api object) => object.id,
      setId: (Api object, int id) {
        object.id = id;
      },
      objectToFB: (Api object, fb.Builder fbb) {
        final urlOffset = fbb.writeString(object.url);
        final shortUrlOffset = fbb.writeString(object.shortUrl);
        final localhostURLOffset = fbb.writeString(object.localhostURL);
        final apiUrlOffset = fbb.writeString(object.apiUrl);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, urlOffset);
        fbb.addOffset(2, shortUrlOffset);
        fbb.addOffset(3, localhostURLOffset);
        fbb.addOffset(4, apiUrlOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object =
            Api(id: idParam)
              ..url = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 6, '')
              ..shortUrl = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 8, '')
              ..localhostURL = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 10, '')
              ..apiUrl = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 12, '');

        return object;
      },
    ),
    LoginUserData: obx_int.EntityDefinition<LoginUserData>(
      model: _entities[4],
      toOneRelations: (LoginUserData object) => [],
      toManyRelations: (LoginUserData object) => {},
      getId: (LoginUserData object) => object.id,
      setId: (LoginUserData object, int id) {
        object.id = id;
      },
      objectToFB: (LoginUserData object, fb.Builder fbb) {
        final usernameOffset = fbb.writeString(object.username);
        final passwordOffset = fbb.writeString(object.password);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, usernameOffset);
        fbb.addOffset(2, passwordOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final usernameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final passwordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = LoginUserData(
          id: idParam,
          username: usernameParam,
          password: passwordParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// See [User.mail].
  static final mail = obx.QueryStringProperty<User>(_entities[0].properties[1]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[0].properties[2]);

  /// See [User.personalnummer].
  static final personalnummer = obx.QueryIntegerProperty<User>(
    _entities[0].properties[3],
  );

  /// See [User.adminRecht].
  static final adminRecht = obx.QueryIntegerProperty<User>(
    _entities[0].properties[4],
  );

  /// See [User.privatfahrt].
  static final privatfahrt = obx.QueryBooleanProperty<User>(
    _entities[0].properties[5],
  );

  /// See [User.prozentregelung].
  static final prozentregelung = obx.QueryBooleanProperty<User>(
    _entities[0].properties[6],
  );
}

/// [Fahrzeug] entity fields to define ObjectBox queries.
class Fahrzeug_ {
  /// See [Fahrzeug.id].
  static final id = obx.QueryIntegerProperty<Fahrzeug>(
    _entities[1].properties[0],
  );

  /// See [Fahrzeug.name].
  static final name = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[1],
  );

  /// See [Fahrzeug.imagePath].
  static final imagePath = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[2],
  );

  /// See [Fahrzeug.objektName].
  static final objektName = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[3],
  );

  /// See [Fahrzeug.caption].
  static final caption = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[4],
  );

  /// See [Fahrzeug.gpsTimeString].
  static final gpsTimeString = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[5],
  );

  /// See [Fahrzeug.versicherungsnummer].
  static final versicherungsnummer = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[6],
  );

  /// See [Fahrzeug.telefonUnfall].
  static final telefonUnfall = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[7],
  );

  /// See [Fahrzeug.telefonPanne].
  static final telefonPanne = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[8],
  );

  /// See [Fahrzeug.versicherung].
  static final versicherung = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[9],
  );

  /// See [Fahrzeug.gpsTime].
  static final gpsTime = obx.QueryIntegerProperty<Fahrzeug>(
    _entities[1].properties[10],
  );

  /// See [Fahrzeug.course].
  static final course = obx.QueryIntegerProperty<Fahrzeug>(
    _entities[1].properties[11],
  );

  /// See [Fahrzeug.satInView].
  static final satInView = obx.QueryIntegerProperty<Fahrzeug>(
    _entities[1].properties[12],
  );

  /// See [Fahrzeug.overspeed].
  static final overspeed = obx.QueryIntegerProperty<Fahrzeug>(
    _entities[1].properties[13],
  );

  /// See [Fahrzeug.fahrzeugId].
  static final fahrzeugId = obx.QueryIntegerProperty<Fahrzeug>(
    _entities[1].properties[14],
  );

  /// See [Fahrzeug.faultCodes].
  static final faultCodes = obx.QueryIntegerProperty<Fahrzeug>(
    _entities[1].properties[15],
  );

  /// See [Fahrzeug.latitude].
  static final latitude = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[16],
  );

  /// See [Fahrzeug.longitude].
  static final longitude = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[17],
  );

  /// See [Fahrzeug.speed].
  static final speed = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[18],
  );

  /// See [Fahrzeug.speedKnots].
  static final speedKnots = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[19],
  );

  /// See [Fahrzeug.rpm].
  static final rpm = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[20],
  );

  /// See [Fahrzeug.fuelLevel].
  static final fuelLevel = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[21],
  );

  /// See [Fahrzeug.fuelRate].
  static final fuelRate = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[22],
  );

  /// See [Fahrzeug.externalPower].
  static final externalPower = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[23],
  );

  /// See [Fahrzeug.mileage].
  static final mileage = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[24],
  );

  /// See [Fahrzeug.altitude].
  static final altitude = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[25],
  );

  /// See [Fahrzeug.coolantTemperature].
  static final coolantTemperature = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[26],
  );

  /// See [Fahrzeug.gasPedal].
  static final gasPedal = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[27],
  );

  /// See [Fahrzeug.motorLast].
  static final motorLast = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[28],
  );

  /// See [Fahrzeug.xAcceleration].
  static final xAcceleration = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[29],
  );

  /// See [Fahrzeug.zAcceleration].
  static final zAcceleration = obx.QueryDoubleProperty<Fahrzeug>(
    _entities[1].properties[30],
  );

  /// See [Fahrzeug.ignition].
  static final ignition = obx.QueryBooleanProperty<Fahrzeug>(
    _entities[1].properties[31],
  );

  /// See [Fahrzeug.typ].
  static final typ = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[32],
  );

  /// See [Fahrzeug.typNummer].
  static final typNummer = obx.QueryStringProperty<Fahrzeug>(
    _entities[1].properties[33],
  );
}

/// [GeoData] entity fields to define ObjectBox queries.
class GeoData_ {
  /// See [GeoData.id].
  static final id = obx.QueryIntegerProperty<GeoData>(
    _entities[2].properties[0],
  );

  /// See [GeoData.lat].
  static final lat = obx.QueryDoubleProperty<GeoData>(
    _entities[2].properties[1],
  );

  /// See [GeoData.lon].
  static final lon = obx.QueryDoubleProperty<GeoData>(
    _entities[2].properties[2],
  );
}

/// [Api] entity fields to define ObjectBox queries.
class Api_ {
  /// See [Api.id].
  static final id = obx.QueryIntegerProperty<Api>(_entities[3].properties[0]);

  /// See [Api.url].
  static final url = obx.QueryStringProperty<Api>(_entities[3].properties[1]);

  /// See [Api.shortUrl].
  static final shortUrl = obx.QueryStringProperty<Api>(
    _entities[3].properties[2],
  );

  /// See [Api.localhostURL].
  static final localhostURL = obx.QueryStringProperty<Api>(
    _entities[3].properties[3],
  );

  /// See [Api.apiUrl].
  static final apiUrl = obx.QueryStringProperty<Api>(
    _entities[3].properties[4],
  );
}

/// [LoginUserData] entity fields to define ObjectBox queries.
class LoginUserData_ {
  /// See [LoginUserData.id].
  static final id = obx.QueryIntegerProperty<LoginUserData>(
    _entities[4].properties[0],
  );

  /// See [LoginUserData.username].
  static final username = obx.QueryStringProperty<LoginUserData>(
    _entities[4].properties[1],
  );

  /// See [LoginUserData.password].
  static final password = obx.QueryStringProperty<LoginUserData>(
    _entities[4].properties[2],
  );
}
